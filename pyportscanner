#!/usr/bin/env python

__Title__ = "iPerf Discovery"
__author__ = "Kris Armstrong"
__version__ = "1.0.11"


# TITLE: iPerf Discovery
# Author: Kris Armstrong
# Date: June 14, 2017
# Version 1.0.11

# Revision History

# Known Defects: June 7, 2017
# options file parser incomplete

# FUTURE FEATURES: June 6, 2017
# Adding Threading would speed scan time

# Change Log
# ----------------------------------------------------------------------------
# Kris Armstrong | June 14 2017| Removed Threading                           |
# ----------------------------------------------------------------------------
# Kris Armstrong | June 12 2017| Changed function name to tcp_port_ping      |
#                |             | Setup separate timers for tcp_ping and query|
#                |             | First pass at adding docstrings             |
# ----------------------------------------------------------------------------
# Kris Armstrong | June 8 2017 | Moved iPerf query to its own function       |
#                |             | Attempt 1 - Threading                       |
#                |             | Added Argparse -v Version                   |
#                |             | Added Argparse -o Option File               |
#                |             | Added Argparse -t default timeout over ride |
#                |             | Added Argparse -th Threaded mode            |
#                |             | Removed aircheck_sqlLITE function as it     |
#                |             | will not be used                            |
#                |             | Created option_file parser                  |
# ----------------------------------------------------------------------------
# Kevin Loftin   | June 7 2017 | Skip custom parsing and write raw results   |
# ----------------------------------------------------------------------------
# Kris Armstrong | June 7 2017 | Removed Custom logging                      |
#                |             | Implemented the Python Logging Library      |
#                |             | Attempting to implement variable timeout    |
#                |             | Improved VarName Read ability               |
# ----------------------------------------------------------------------------
# Kris Armstrong | June 6 2017 | Added command line arguments                |
#                |             | Moved onscreen output to log file           |
#                |             | Method Cleanup                              |
#                |             | Variable name cleanup                       |
#                |             | Removed unused imports                      |
#                |             | FIXED: Invalid counts (not counting)        |
#                |             | FIXED: Output not seperating strings        |
#                |             | FIXED: iPerf Accessory file was not purged  |
# ----------------------------------------------------------------------------
# Kris Armstrong | June 5 2017 | Added Output to file for iPerf Remotes      |
#                |             | Started Output formatting changes           |
# ----------------------------------------------------------------------------
# Kris Armstrong | June 1 2017 | Added Logging Method                        |
#                |             | Cleaned up Exception Handling               |
#                |             | Remove b' in favor of .encode and .decode   |
#                |             | Added aircheck_sqllite method               |
#                |             | Added Min/Max Time Outs                     |
# ----------------------------------------------------------------------------
# Kris Armstrong | May 31 2017 | Added FileI/O for exception                 |
# ----------------------------------------------------------------------------
# Kris Armstrong | May 30 2017 | Moved Vars to Global                        |
# ----------------------------------------------------------------------------
# Kris Armstrong | May 25 2017 | Added Parser Function                       |
# ----------------------------------------------------------------------------
# Kris Armstrong | May 1 2017  | iPerf Discovery was Born                    |
# ----------------------------------------------------------------------------
#

# Library Imports
import argparse
import logging
import os
import socket
from datetime import datetime

import ipaddress

# Defines Global Variables
BUFFER = 4096  # 4k The size of the TCP Buffer
MESSAGE = 'TA:getattrlong'.encode('utf-8')
TCP_PORT = 2359  # Sets Port to 2359 (iPerf Remote)
MIN_SCAN_TIMEOUT = .010  # Sets Min socket timeout to 10ms 'milliseconds'
MAX_SCAN_TIMEOUT = .160  # Sets Max socket timeout to 100ms 'milliseconds'
IPERF_QUERY_TIMEOUT = 5  # Sets socket timeout to 5s 'seconds'

# File I/O Vars
LOG_FILE = 'iperfdiscovery.log'  # Testing log, revert to above on actual AirCheck G2
IPERF_ACCESSORY_FILE = 'iperfaccessory'  # iPerf Accessory output file
OPTION_FILE = '/mnt/mmc3/iperfaccessory.conf'  # iPerf Accessory option file "Allows increasing timeout"

def main():
    """
    iPerf Accessory Discovery Utility for AirCheck G2 V2.0

    :return:
    """
    # Logging (File Location, Log level, date, message)
    logging.basicConfig(filename=LOG_FILE, filemode='w', level=logging.DEBUG, format='%(asctime)s %(message)s')

    # Removes iPerf Accessory File if its exists File Output Logs errors
    # NOTE: File cannot be found is normal in the log expected behavior
    try:
        os.remove(IPERF_ACCESSORY_FILE)
    except OSError as err_msg:
        logging.debug('DEBUG: OS Error %s', err_msg)
        pass

    # Arg Parser
    parser = argparse.ArgumentParser()
    parser.add_argument('network', help='The IP/Network you wish to scan', type=str)
    parser.add_argument('-t', '--timeout', nargs='?', const=1, type=float, help='Optional socket timeout')
    parser.add_argument('-v', '--version', action='version', version='%(prog)s 1.9')
    parser.add_argument('-o', '--options', action='store_true',
                        help='Uses the advanced configuration options if present')

    try:
        args = parser.parse_args()
        if args.options:
            OPTION_FILE()

        if args.timeout:
            MIN_SCAN_TIMEOUT = args.timeout
            print(MIN_SCAN_TIMEOUT)

        network = args.network  # Gets network from args parse mandatory argument

        # Calling Port Scanner
        network = (ipaddress.ip_network(network, strict=False))

        tcp_port_ping(network)

    except KeyboardInterrupt as err_msg:
        logging.debug(err_msg)

    except OSError as err_msg:
        logging.debug(err_msg)

def tcp_port_ping(network):
    """
    TCP Port Ping, Identifies live hosts on port 2359.
    :param network:
    :return:
    """

    tmp_iperf_list = []  # Temp iPerf List (Responders)
    total_ip_count = 0  # Total IP's in network
    active_ip_count = 0  # Total IP's Active, with port 2359 "OPEN"

    socket.setdefaulttimeout(MIN_SCAN_TIMEOUT)  # Setting Socket Time Out

    tcp_ping_start_time = datetime.now()  # Setting beginning time of scan

    # Scans for Active IP's with port 2359 Open

    for host in network.hosts():  # Determines Hosts for network

        total_ip_count += 1  # Total number of host counts

        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as tcp_sock:
                result = tcp_sock.connect_ex((str(host), TCP_PORT))  # Check if IP is Valid and Port is Open
                if result == 0:
                    active_ip_count += 1  # Increment valid IP counter
                    tmp_iperf_list.append(host)  # Appends iPerf attributes to iPerf Remote list
                    logging.debug("DEBUG: IP(s) to be scanned %s", host)  # Debug IP Address of remote(s)

        except OSError as err_msg:
            logging.debug('Socket Error %s', err_msg)
            print(err_msg)
            pass

    tcp_ping_end_time = datetime.now()

    tcp_ping_total_time = tcp_ping_end_time - tcp_ping_start_time

    iperf_query(tmp_iperf_list, total_ip_count, active_ip_count, tcp_ping_total_time)


def iperf_query(tmp_iperf_list, total_ip_count, active_ip_count, tcp_ping_total_time):
    """
    Sends query to IP's listening on 2359 with the TA:gettattrlong message.
    Adds valid iPerf Accessories to the iPerf Accessories list

    :param tmp_iperf_list:
    :param start_time:
    :param active_ip_count:
    :param total_ip_count:
    :param tcp_ping_total_time:
    :return:
    """
    iPerf_accessory = []  # Valid iPerf Remotes

    # Increase Scan Time of Active Hosts to 5 second
    socket.setdefaulttimeout(IPERF_QUERY_TIMEOUT)  # Sockets timeout to 5 seconds

    iperf_query_start_time = datetime.now()

    for host in tmp_iperf_list:

        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as tcp_sock:
                tcp_sock.connect_ex((str(host), TCP_PORT))  # Open TCP Socket to Port for given IP
                logging.debug("DEBUG: IP(s) to be queried %s", host)  # Debug IP Address of remote(s)
                tcp_sock.sendall(MESSAGE)  # Gets the attributes binary Required for python3
                response = tcp_sock.recv(BUFFER)  # Sets Receive Buffer Size
                iPerf_accessory.append(response)  # Appends iPerf attributes to iPerf Remote list

        except OSError as err_msg:
            logging.debug('DEBUG: Socket Error %s', err_msg)
            pass

        iperf_query_end_time = datetime.now()  # Setting End Time (Scan Complete)
        iperf_query_total_time = iperf_query_end_time - iperf_query_start_time  # Calculating Total Time

        total_time = tcp_ping_total_time + iperf_query_total_time

        remote_parser(iPerf_accessory, tcp_ping_total_time, iperf_query_total_time, active_ip_count, total_ip_count,
                      total_time)


def remote_parser(iPerf_accessory, tcp_ping_total_time, iperf_query_total_time, active_ip_count, total_ip_count,
                  total_time):
    """
    Parses the iPerf Accessory results.
    Outputs iPerf devices to a file

    :param iPerf_accessory:
    :param tcp_ping_total_time:
    :param iperf_query_total_time:
    :param active_ip_count:
    :param total_ip_count:
    :param total_time:
    :return:
    """
    count_valid = 0  # Initialize Counts Valid iPerf Remotes
    count_invalid = 0  # Initialize Counts InValid iPerf Remotes

    for fields in iPerf_accessory:
        fields = str(fields.decode('utf-8'))  # Decodes byte string to unicode utf-8

        if fields.find('iPerf Remote') >= 0:  # Looks for the string iPerf Remote >= 0 because neg returns buleon True
            count_valid += 1

            if True:
                # Opens iPerf Remote File and writes fields
                with open(IPERF_ACCESSORY_FILE, 'a+') as file_open:
                    file_open.write(fields)
                    file_open.write('\n')

            # Next two lines remove garbage
            fields = str(fields).replace(
                    "{'OS_STDERR': '', 'AGENT_MESSAGE': '', 'AGENT_RETURN_CODE': 0, 'OS_STDOUT': '",
                    '')  # Removing leading garbage
            fields = str(fields).replace(
                    "', 'OS_COMMAND': 'mfg_mach;mfg_ipv4;mfg_gtme;cat /build_number.txt;cat /sys/class/net/eth0/speed;mfg_batt;mfg_poev;cat /tmp/xdpdump.txt', 'OS_RETURNCODE': 0}",
                    '')  # Removing trailing junk
            logging.debug('%s', fields)

            # Formatting the fields to match SQL Parser
            fields = str(fields).strip()  # Removes any leading and trailing spaces
            ' '.join(fields.split())  # Removes duplicate spaces

            fields = str(fields).replace('ethaddr=', 'MAC=')
            fields = str(fields).replace('PS9: ', 'Batt=')
            fields = str(fields).replace('PS8: ', 'PoeV=')
            fields = str(fields).replace('EtherType: ', 'NsType=')
            fields = str(fields).replace('Device ID: ', 'NsDev=')
            fields = str(fields).replace('Addresses: ', 'NsAddr=')
            fields = str(fields).replace('Platform:  ', 'NsPlatform=')
            fields = str(fields).replace('Port ID:   ', 'NsPort=')
            fields = str(fields).replace('Vlan ID:   ', 'NsVlan=')
            fields = str(fields).replace('Vlan ID:', 'NsVlan=')
            fields = str(fields).replace('\\n', ';')

            if False:
                # Opens iPerf Remote File and writes fields
                with open(IPERF_ACCESSORY_FILE, 'a+') as file_open:
                    file_open.write(fields)
                    file_open.write('\n')
        else:
            count_invalid += 1
            logging.info("%s Not an iPerf Remote", fields)

    total_counts = count_invalid + count_valid

    logging.debug("DEBUG: Checking: %s" " IP(s) for port: %s " "out of: %s " "scanned", active_ip_count, TCP_PORT,
                  total_ip_count)
    logging.debug("DEBUG: Total Devices on port: %s" " is %s", TCP_PORT, total_counts)
    logging.debug("DEBUG: Total Valid iPerf Remotes: %s", count_valid)
    logging.debug("DEBUG: Total Invalid iPerf Remotes on: %s", count_invalid)
    logging.debug("DEBUG: Total TCP Ping Time: %s", tcp_ping_total_time)
    logging.debug("DEBUG: Total iPerf Query Time: %s", iperf_query_total_time)
    logging.debug("DEBUG: Total Time: %s ", total_time)


def options_conf_parser():
    """

    :return:
    """
    with open(OPTION_FILE, mode='r') as file:
        print("options")
        print(file)


if __name__ == "__main__":
    main()
